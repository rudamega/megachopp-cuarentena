// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Carts = sequelize.define('carts', {
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    status: {
      type: DataTypes.STRING,
      defaultValue: "open",
    },
    date: {
      type: DataTypes.DATE,
    },
    cliente: {
      type: DataTypes.STRING,
    },
    razonSocial: {
      type: DataTypes.STRING,
    },
    ruc: {
      type: DataTypes.STRING,
    },
    email: {
      type: DataTypes.STRING,
    },
    tel: {
      type: DataTypes.STRING,
    },
    lugar: {
      type: DataTypes.STRING,
    },
    obs: {
      type: DataTypes.STRING,
    },
    sena: {
      type: DataTypes.STRING,
    },
    latitud: {
      type: DataTypes.STRING,
    },
    longitud: {
      type: DataTypes.STRING,
    },
    factura: {
      type: DataTypes.STRING,
    },
    ciudad: {
      type: DataTypes.STRING,
    },
    zona: {
      type: DataTypes.STRING,
    },
    show: {
      type: DataTypes.STRING,
      defaultValue: "no",
    },
  }, {
    tableName: 'carts',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Carts.associate = (models) => {
    Carts.belongsTo(models.clientes, {
      foreignKey: {
        name: 'clienteIdKey',
        field: 'cliente_id',
      },
      as: 'linkedCliente',
    });
    Carts.belongsTo(models.users, {
      foreignKey: {
        name: 'userIdKey',
        field: 'user_id',
      },
      as: 'user',
    });
    Carts.hasMany(models.facturas, {
      foreignKey: {
        name: 'cartIdKey',
        field: 'cart_id',
      },
      as: 'facturas',
    });
    Carts.hasMany(models.cartItems, {
      foreignKey: {
        name: 'cartIdKey',
        field: 'cart_id',
      },
      as: 'cartItems',
    });
  };

  return Carts;
};
